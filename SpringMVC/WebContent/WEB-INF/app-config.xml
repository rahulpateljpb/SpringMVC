<!--If you do not want to go with default filename as [servlet-name]-servlet.xml and
 default location as WebContent/WEB-INF  then use contextConfigLocation to intialise the context-->

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
	
	<!-- Scans the classpath of this application for @Components to deploy as 
		beans The <context:component-scan...> tag will be use to activate Spring MVC annotation 
		scanning capability which 
		allows to make use of annotations like @Controller and @RequestMapping etc. -->
		
	<context:component-scan base-package="com.actions" />
	<!-- Configures the @Controller programming model -->
	<mvc:annotation-driven />
	<!-- Resolves view names to protected .jsp resources within the /WEB-INF/views 
		directory -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>
</beans>